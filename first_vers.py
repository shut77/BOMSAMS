import os
import logging

from datetime import datetime, timedelta
from dateutil import parser
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
)
import firebase_admin
from firebase_admin import credentials, firestore

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
cred = credentials.Certificate("bomsams-e0996-firebase-adminsdk-fbsvc-64de839fde.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GROUP_NAME, GROUP_PASSWORD, JOIN_GROUP, JOIN_PASSWORD, EVENT_DATE, EVENT_START, EVENT_END, EVENT_LOCATION = range(8)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üç¥ –ë–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –æ–±–µ–¥–æ–≤!\n"
        "–°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É: /create\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ: /join\n"
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å: /addevent\n"
        "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏: /current\n"
        "–ò—Å—Ç–æ—Ä–∏—è: /history"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
async def create_group(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return GROUP_NAME

async def process_group_name(update: Update, context: CallbackContext) -> int:
    context.user_data['group_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã:")
    return GROUP_PASSWORD

async def process_group_password(update: Update, context: CallbackContext) -> int:
    group_name = context.user_data['group_name']
    password = update.message.text
    user_id = update.message.from_user.id

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ Firestore
    db.collection('groups').document(group_name).set({
        'password': password,
        'members': [user_id]
    })

    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ–∑–¥–∞–Ω–∞!")
    return ConversationHandler.END

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ
async def join_group(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return JOIN_GROUP

async def process_join_group(update: Update, context: CallbackContext) -> int:
    context.user_data['join_group'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≥—Ä—É–ø–ø—ã:")
    return JOIN_PASSWORD

async def process_join_password(update: Update, context: CallbackContext) -> int:
    group_name = context.user_data['join_group']
    password = update.message.text
    user_id = update.message.from_user.id

    group_ref = db.collection('groups').document(group_name)
    group = group_ref.get()

    if not group.exists:
        await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return ConversationHandler.END

    if group.to_dict()['password'] != password:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
    group_ref.update({"members": firestore.ArrayUnion([user_id])})
    await update.message.reply_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ '{group_name}'!")
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
async def add_event(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-10-10):")
    return EVENT_DATE

async def process_event_date(update: Update, context: CallbackContext) -> int:
    try:
        date = parser.parse(update.message.text).date()
        context.user_data['event_date'] = date
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:00):")
        return EVENT_START
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EVENT_DATE

async def process_event_start(update: Update, context: CallbackContext) -> int:
    try:
        start_time = parser.parse(update.message.text).time()
        context.user_data['event_start'] = start_time
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):")
        return EVENT_END
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EVENT_START

async def process_event_end(update: Update, context: CallbackContext) -> int:
    try:
        end_time = parser.parse(update.message.text).time()
        context.user_data['event_end'] = end_time
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:")
        return EVENT_LOCATION
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EVENT_END

async def process_event_location(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    date = context.user_data['event_date']
    start_time = context.user_data['event_start']
    end_time = context.user_data['event_end']
    location = update.message.text

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firestore
    db.collection('events').add({
        'user_id': user_id,
        'date': datetime.combine(date, start_time).isoformat(),
        'end_time': datetime.combine(date, end_time).isoformat(),
        'location': location,
        'timestamp': datetime.now().isoformat()
    })

    await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
async def current_events(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    now = datetime.now()
    two_days_later = now + timedelta(days=2)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    groups = db.collection('groups').where('members', 'array_contains', user_id).stream()
    group_names = [group.id for group in groups]

    if not group_names:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ!")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    events = db.collection('events').where('date', '>=', now.isoformat()).where('date', '<=', two_days_later.isoformat()).stream()

    response = "üçΩÔ∏è –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è (2 –¥–Ω—è):\n"
    events_found = False

    for event in events:
        event_data = event.to_dict()
        if event_data['user_id'] == user_id or any(group in group_names for group in event_data.get('groups', [])):
            events_found = True
            response += f"üìÖ {event_data['date']} - {event_data['end_time']}\nüìç {event_data['location']}\n\n"

    if not events_found:
        response = "ü§∑‚ôÇÔ∏è –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω–µ–π –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."

    await update.message.reply_text(response)

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π
async def history(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    events = db.collection('events').order_by('timestamp').stream()

    response = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π:\n"
    for event in events:
        event_data = event.to_dict()
        response += f"üìÖ {event_data['date']} - {event_data['end_time']}\nüìç {event_data['location']}\n\n"

    await update.message.reply_text(response)

def main() -> None:
    from token_for_tg import TOKEN_TG
    TOKEN = TOKEN_TG
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("current", current_events))
    application.add_handler(CommandHandler("history", history))

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    conv_create = ConversationHandler(
        entry_points=[CommandHandler('create', create_group)],
        states={
            GROUP_NAME: [MessageHandler(filters.TEXT, process_group_name)],
            GROUP_PASSWORD: [MessageHandler(filters.TEXT, process_group_password)],
        },
        fallbacks=[]
    )

    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ
    conv_join = ConversationHandler(
        entry_points=[CommandHandler('join', join_group)],
        states={
            JOIN_GROUP: [MessageHandler(filters.TEXT, process_join_group)],
            JOIN_PASSWORD: [MessageHandler(filters.TEXT, process_join_password)],
        },
        fallbacks=[]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    conv_event = ConversationHandler(
        entry_points=[CommandHandler('addevent', add_event)],
        states={
            EVENT_DATE: [MessageHandler(filters.TEXT, process_event_date)],
            EVENT_START: [MessageHandler(filters.TEXT, process_event_start)],
            EVENT_END: [MessageHandler(filters.TEXT, process_event_end)],
            EVENT_LOCATION: [MessageHandler(filters.TEXT, process_event_location)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_create)
    application.add_handler(conv_join)
    application.add_handler(conv_event)

    application.run_polling()

if __name__ == '__main__':
    main()