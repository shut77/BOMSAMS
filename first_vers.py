import os
import logging
from datetime import datetime, timedelta
from dateutil import parser
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
)
import firebase_admin
from firebase_admin import credentials, firestore
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
firebase_config = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
if not firebase_config:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_APPLICATION_CREDENTIALS –Ω–µ –∑–∞–¥–∞–Ω–∞!")
cred_dict = json.loads(firebase_config)
cred = credentials.Certificate(cred_dict)
firebase_admin.initialize_app(cred)
db = firestore.client()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    GROUP_NAME, GROUP_PASSWORD, JOIN_GROUP, JOIN_PASSWORD,
    EVENT_GROUP, EVENT_DATE, EVENT_START, EVENT_END, EVENT_LOCATION,
    CURRENT_CHOOSE_GROUP
) = range(10)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üç¥ –ë–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –æ–±–µ–¥–æ–≤!\n"
        "–°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É: /create\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ: /join\n"
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å: /addevent\n"
        "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏: /current\n"
        "–ò—Å—Ç–æ—Ä–∏—è: /history"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã)
async def add_event(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    groups = db.collection('groups').where('members', 'array_contains', user_id).stream()
    group_names = [group.id for group in groups]

    if not group_names:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ.")
        return ConversationHandler.END

    context.user_data['user_groups'] = group_names
    group_list = "\n".join(group_names)
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è:\n{group_list}")
    return EVENT_GROUP

async def process_event_group(update: Update, context: CallbackContext) -> int:
    selected_group = update.message.text
    user_groups = context.user_data.get('user_groups', [])

    if selected_group not in user_groups:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return EVENT_GROUP

    context.user_data['event_group'] = selected_group
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-10-10):")
    return EVENT_DATE

# ... [–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

async def process_event_location(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    date = context.user_data['event_date']
    start_time = context.user_data['event_start']
    end_time = context.user_data['event_end']
    location = update.message.text
    event_group = context.user_data['event_group']

    db.collection('events').add({
        'user_id': user_id,
        'group': event_group,
        'date': datetime.combine(date, start_time).isoformat(),
        'end_time': datetime.combine(date, end_time).isoformat(),
        'location': location,
        'timestamp': datetime.now().isoformat()
    })

    await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
async def current_events_start(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    groups = db.collection('groups').where('members', 'array_contains', user_id).stream()
    group_names = [group.id for group in groups]

    if not group_names:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ!")
        return ConversationHandler.END

    context.user_data['current_groups'] = group_names
    group_list = "\n".join(group_names)
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n{group_list}")
    return CURRENT_CHOOSE_GROUP

async def process_current_group(update: Update, context: CallbackContext) -> int:
    selected_group = update.message.text
    current_groups = context.user_data.get('current_groups', [])

    if selected_group not in current_groups:
        await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CURRENT_CHOOSE_GROUP

    now = datetime.now()
    two_days_later = now + timedelta(days=2)
    events = db.collection('events').where('group', '==', selected_group)\
                                      .where('date', '>=', now.isoformat())\
                                      .where('date', '<=', two_days_later.isoformat())\
                                      .stream()

    response = f"üçΩÔ∏è –°–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ '{selected_group}':\n"
    events_found = False

    for event in events:
        event_data = event.to_dict()
        events_found = True
        creator_link = f"tg://user?id={event_data['user_id']}"
        start_time = parser.parse(event_data['date']).strftime("%d.%m.%Y %H:%M")
        end_time = parser.parse(event_data['end_time']).strftime("%H:%M")
        response += (
            f"üìÖ *{start_time}-{end_time}*\n"
            f"üìç {event_data['location']}\n"
            f"üë§ [–°–æ–∑–¥–∞—Ç–µ–ª—å]({creator_link})\n\n"
        )

    if not events_found:
        response = "ü§∑‚ôÇÔ∏è –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç."

    await update.message.reply_text(response, parse_mode='Markdown')
    return ConversationHandler.END

def main() -> None:
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", history))

    # ... [–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ] ...

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
    conv_current = ConversationHandler(
        entry_points=[CommandHandler('current', current_events_start)],
        states={CURRENT_CHOOSE_GROUP: [MessageHandler(filters.TEXT, process_current_group)]},
        fallbacks=[]
    )
    application.add_handler(conv_current)

    application.run_polling()

if __name__ == '__main__':
    main()